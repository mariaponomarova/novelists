[
  {
    "kind": 1,
    "language": "markdown",
    "value": "## Exploring Wikidata\n\nIn this notebook, I will explore the data related to novelists. [List of novelists on Wikipedia](https://en.wikipedia.org/wiki/List_of_novelists_by_nationality)  \n\n\nSince I am passionate about philosophy, I decided to focus on the novelists who are specialized in this field.",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "### Explore occupations and fields of work",
    "metadata": {}
  },
  {
    "kind": 2,
    "language": "sparql",
    "value": "### List 50 more frequent occupations\n\nPREFIX wd: <http://www.wikidata.org/entity/>\n\n\nSELECT ?occupation ?occupationLabel ?n\nWHERE {\n\n    {\n    SELECT ?occupation (COUNT(*) as ?n)\n    WHERE {\n        ?item wdt:P106 ?occupation.\n            #find items that are instances of human\n             #wdt:P31 wd:Q5.\n        # ?occupation wdt:P31 wd:Q11862829\n        }\n    GROUP BY ?occupation \n    ORDER BY DESC(?n)\n\n    #OFFSET 20\n    LIMIT 20\n    }\n\n    SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" }\n    \n    }\n    ORDER BY DESC(?n)\n\n",
    "metadata": {}
  },
  {
    "kind": 2,
    "language": "sparql",
    "value": "### List more frequent occupations\n\nPREFIX wd: <http://www.wikidata.org/entity/>\n\nSELECT ?field ?fieldLabel ?n\nWHERE {\n\n    {\n    SELECT ?field (COUNT(*) as ?n)\n    WHERE {\n        ?item wdt:P101 ?field.\n        }\n    GROUP BY ?field \n    ORDER BY DESC(?n)\n\n    #OFFSET 20\n    LIMIT 20\n    }\n\n    SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" }\n    \n    }\n    ORDER BY DESC(?n)\n\n",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "### Inspect novelists and related occupations",
    "metadata": {
      "metadata": {
        "tags": [
          "parameters"
        ]
      }
    }
  },
  {
    "kind": 2,
    "language": "sparql",
    "value": "   ## Count and inspect occupations and fields of work\n   SELECT (COUNT(*) as ?eff)\n    WHERE {\n        ?item wdt:P31 wd:Q5;  # Any instance of a human.\n\n            wdt:P106 wd:Q6625963  # novelist 32156\n        \n            #wdt:P101 wd:Q8242  # literature 13419\n            #wdt:P106 wd:Q4964182  # philosopher 34513\n            #wdt:P101 wd:Q5891 # philosophy 7673\n            #wdt:P106 wd:Q49757  # poet 121017\n            #wdt:P101 wd:Q482 # poetry 12871\n            #wdt:P106 wd:Q36180  # writer 377240\n            #wdt:P101 wd:Q38072107 # fictional literature 37\n\n    }  ",
    "metadata": {}
  },
  {
    "kind": 2,
    "language": "sparql",
    "value": "### Modern novelists specialised in philosophy :Â born from 1801 onward\nSELECT (count(*) as ?number)\nWHERE {\n    {?item wdt:P106 wd:Q6625963}  # novelist\n    UNION\n    {?item wdt:P101 wd:Q5891}     # philosophy\n    \n    ?item wdt:P31 wd:Q5; # Any instance of a human.\n            wdt:P569 ?birthDate.\n    \n\n    BIND(REPLACE(str(?birthDate), \"(.*)([0-9]{4})(.*)\", \"$2\") AS ?year)\n    FILTER(xsd:integer(?year) > 1800 )\n}",
    "metadata": {}
  },
  {
    "kind": 2,
    "language": "sparql",
    "value": "### Modern novelists and philosophers\nSELECT (count(*) as ?number)\nWHERE {\n    {?item wdt:P106 wd:Q6625963}  # novelist\n    UNION\n    {?item wdt:P101 wd:Q8242}     # literature\n    UNION\n    {?item wdt:P106 wd:Q4964182}  # philosopher\n    UNION\n    {?item wdt:P101 wd:Q5891}     # philosophy\n    \n    ?item wdt:P31 wd:Q5; # Any instance of a human.\n            wdt:P569 ?birthDate.\n    \n\n    BIND(REPLACE(str(?birthDate), \"(.*)([0-9]{4})(.*)\", \"$2\") AS ?year)\n    FILTER(xsd:integer(?year) > 1800 && xsd:integer(?year) < 1990)\n}",
    "metadata": {}
  },
  {
    "kind": 2,
    "language": "sparql",
    "value": "### Modern novelists specialized in philosophy: born from 1801 onward, ranked by popularity\nSELECT ?item ?itemLabel ?birthDate ?sitelinks\nWHERE {\n    { ?item wdt:P106 wd:Q6625963 }  # Novelist occupation\n    UNION\n    { ?item wdt:P101 wd:Q5891 }     # Philosophy field of work\n\n    ?item wdt:P31 wd:Q5;            # Instance of human\n          wdt:P569 ?birthDate.\n\n    FILTER(YEAR(?birthDate) > 1800)  \n\n    SERVICE wikibase:label { bd:serviceParam wikibase:language \"en\" }\n\n    ?item wikibase:sitelinks ?sitelinks.\n}\nORDER BY DESC(?sitelinks)  # Rank by number of Wikipedia sitelinks\nLIMIT 10\n",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "### Count how many properties are available for the considered population\n\nExecute this query on the Wikidata sparql-endpoint and save the result to a CSV document that you will store in your project: [population properties list](../Wikidata/properties_20250306.csv)\n\n\nOpen your CSV file with a spreadsheet editor:\n* Inspect the content of the results and look for relevant properties with regard to your research questions\n* Observe all the links to other semantic web repositories, probably the sources of this information.\n* You can transform this file to your preferred spreadsheet editor format (Calc, Excel, etc.) and take notes row per row in the spreadsheet.\n",
    "metadata": {}
  },
  {
    "kind": 2,
    "language": "sparql",
    "value": "PREFIX wdt: <http://www.wikidata.org/prop/direct/>\n\nSELECT ?p ?propLabel ?eff\nWHERE {\n{\nSELECT ?p  (count(*) as ?eff)\nWHERE {\n    {?item wdt:P106 wd:Q6625963}  # novelist\n    UNION\n    {?item wdt:P101 wd:Q8242}     # literature\n    UNION\n    {?item wdt:P106 wd:Q4964182}  # philosopher\n    UNION\n    {?item wdt:P101 wd:Q5891}     # philosophy   \n    ?item wdt:P31 wd:Q5; # Any instance of a human.\n            wdt:P569 ?birthDate.\n    ?item  ?p ?o.\n\n    BIND(REPLACE(str(?birthDate), \"(.*)([0-9]{4})(.*)\", \"$2\") AS ?year)\n\n    FILTER(xsd:integer(?year) > 1800  && xsd:integer(?year) < 1900)\n    # FILTER(xsd:integer(?year) > 1850  && xsd:integer(?year) < 1951)\n\n}\nGROUP BY ?p \n\n    }\n\n# get the original property (in the the statement construct)     \n?prop wikibase:directClaim ?p .\n\nSERVICE wikibase:label { bd:serviceParam wikibase:language \"en\". } \n\n\n}  \nORDER BY DESC(?eff)",
    "metadata": {}
  }
]